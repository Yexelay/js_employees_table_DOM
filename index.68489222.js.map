{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAmKiC,EAAY,EAAS,EAC9C,EAIA,EAxKF,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAU,EAAM,gBAAgB,CAAC,MAEnC,EAAgB,EAChB,EAAe,GACf,EAAkB,KAEhB,EAAoB,WACxB,EAAM,gBAAgB,CAAC,MAAM,OAAO,CAAC,SAAC,CAAtC,EAA8C,OAAA,EAAI,SAAS,CAAC,MAAM,CAAC,S,EACrE,EAEM,EAAoB,WACxB,GAAI,EAAiB,CACnB,IAAM,EAAQ,EAAgB,aAAa,CAAC,SACtC,EAAe,EAAM,YAAY,CAAC,sBAExC,CAAA,EAAgB,WAAW,CAAG,EAAM,KAAK,EAAI,EAC7C,EAAkB,IACpB,CACF,EAEA,EAAQ,OAAO,CAAC,SAAC,CAAA,CAAQ,CAAzB,EACE,EAAO,gBAAgB,CAAC,QAAS,WAC3B,IAAiB,EACnB,GAAiB,IAEjB,EAAgB,EAChB,EAAe,GAGjB,IACA,EAAU,EAAO,EACnB,EACF,GAEA,EAAM,aAAa,CAAC,SAAS,gBAAgB,CAAC,QAAS,SAAC,CAAxD,EAC2B,OAArB,EAAE,MAAM,CAAC,OAAO,GAClB,IACA,EAAE,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,UAEzC,GAEA,IAAM,EAAgB,SAAC,CAAA,CAAO,CAA9B,EACE,IAAM,EAAmB,kBAEzB,GAAI,CAAC,GAAS,AAAwB,IAAxB,EAAM,IAAI,GAAG,MAAM,EAI7B,AAAU,SAAV,GAAqB,CAAA,CAAC,EAAiB,IAAI,CAAC,IAAU,EAAM,MAAM,CAAG,CAAA,GA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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\"table\");\nvar headers = table.querySelectorAll(\"th\");\nvar sortDirection = 1;\nvar currentIndex = -1;\nvar activeInputCell = null;\nvar removeActiveClass = function() {\n    table.querySelectorAll(\"tr\").forEach(function(row) {\n        return row.classList.remove(\"active\");\n    });\n};\nvar removeActiveInput = function() {\n    if (activeInputCell) {\n        var input = activeInputCell.querySelector(\"input\");\n        var originalText = input.getAttribute(\"data-original-value\");\n        activeInputCell.textContent = input.value || originalText;\n        activeInputCell = null;\n    }\n};\nheaders.forEach(function(header, index) {\n    header.addEventListener(\"click\", function() {\n        if (currentIndex === index) sortDirection *= -1;\n        else {\n            sortDirection = 1;\n            currentIndex = index;\n        }\n        removeActiveClass();\n        sortTable(index, sortDirection);\n    });\n});\ntable.querySelector(\"tbody\").addEventListener(\"click\", function(e) {\n    if (e.target.tagName === \"TD\") {\n        removeActiveClass();\n        e.target.parentElement.classList.add(\"active\");\n    }\n});\nvar validateInput = function(field, value) {\n    var lettersOnlyRegex = /^[A-Za-z\\s'`]+$/;\n    if (!value || value.trim().length === 0) return false;\n    if (field === \"name\" && (!lettersOnlyRegex.test(value) || value.length < 4)) return false;\n    if (field === \"position\" && !lettersOnlyRegex.test(value)) return false;\n    if (field === \"age\") {\n        var age = +value;\n        if (age < 18 || age > 90) return false;\n    }\n    return true;\n};\nvar createEditableCell = function(cell) {\n    var originalContent = cell.textContent.trim();\n    var field = cell.getAttribute(\"data-qa\");\n    removeActiveInput();\n    cell.textContent = \"\";\n    var input = document.createElement(\"input\");\n    input.type = \"text\";\n    input.value = originalContent;\n    input.className = \"cell-input\";\n    input.setAttribute(\"data-original-value\", originalContent);\n    cell.appendChild(input);\n    input.focus();\n    var saveOrCancelInput = function() {\n        var newValue = input.value.trim();\n        if (!validateInput(field, newValue)) {\n            cell.textContent = originalContent;\n            displayNotification(\"Invalid value for \".concat(field), \"error\");\n        } else {\n            cell.textContent = newValue || originalContent;\n            displayNotification(\"Value for \".concat(field, \" successfully updated\"), \"success\");\n        }\n    };\n    input.addEventListener(\"blur\", saveOrCancelInput);\n    input.addEventListener(\"keypress\", function(e) {\n        if (e.key === \"Enter\") saveOrCancelInput();\n    });\n};\ntable.querySelectorAll(\"tbody td\").forEach(function(cell) {\n    cell.addEventListener(\"dblclick\", function() {\n        createEditableCell(cell);\n    });\n});\nvar sortTable = function(columnIndex, direction) {\n    var _tableBody;\n    var tableBody = table.querySelector(\"tbody\");\n    var rows = _to_consumable_array(tableBody.querySelectorAll(\"tr\"));\n    var sortedRows = rows.sort(function(a, b) {\n        var aText = a.cells[columnIndex].textContent.trim();\n        var bText = b.cells[columnIndex].textContent.trim();\n        if (columnIndex === 4) {\n            var aSalary = parseFloat(aText.replace(/[$,]/g, \"\"));\n            var bSalary = parseFloat(bText.replace(/[$,]/g, \"\"));\n            return (aSalary - bSalary) * direction;\n        }\n        if (+aText && +bText) return (+aText - +bText) * direction;\n        return aText.localeCompare(bText) * direction;\n    });\n    tableBody.innerHTML = \"\";\n    (_tableBody = tableBody).append.apply(_tableBody, _to_consumable_array(sortedRows));\n};\nvar form = document.createElement(\"form\");\nform.setAttribute(\"novalidate\", true);\nform.classList.add(\"new-employee-form\");\nvar createInput = function(labelText, inputName, qaValue) {\n    var type = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \"text\";\n    var label = document.createElement(\"label\");\n    label.textContent = labelText;\n    var input = document.createElement(\"input\");\n    input.name = inputName;\n    input.type = type;\n    input.setAttribute(\"data-qa\", qaValue);\n    input.required = true;\n    label.appendChild(input);\n    return label;\n};\nvar createSelect = function(labelText, selectName, options, qaValue) {\n    var label = document.createElement(\"label\");\n    label.textContent = labelText;\n    var select = document.createElement(\"select\");\n    select.name = selectName;\n    select.setAttribute(\"data-qa\", qaValue);\n    select.required = true;\n    options.forEach(function(optionText) {\n        var option = document.createElement(\"option\");\n        option.value = optionText;\n        option.textContent = optionText;\n        select.appendChild(option);\n    });\n    label.appendChild(select);\n    return label;\n};\nvar notificationDiv = document.createElement(\"div\");\nnotificationDiv.setAttribute(\"data-qa\", \"notification\");\ndocument.body.appendChild(notificationDiv);\nform.appendChild(createInput(\"Name:\", \"name\", \"name\"));\nform.appendChild(createInput(\"Position:\", \"position\", \"position\"));\nform.appendChild(createSelect(\"Office:\", \"office\", [\n    \"Tokyo\",\n    \"Singapore\",\n    \"London\",\n    \"New York\",\n    \"Edinburgh\",\n    \"San Francisco\"\n], \"office\"));\nform.appendChild(createInput(\"Age:\", \"age\", \"age\", \"number\"));\nform.appendChild(createInput(\"Salary:\", \"salary\", \"salary\", \"number\"));\nvar submitButton = document.createElement(\"button\");\nsubmitButton.type = \"submit\";\nsubmitButton.textContent = \"Save to table\";\nform.appendChild(submitButton);\ndocument.body.appendChild(form);\nvar displayNotification = function(message, type) {\n    notificationDiv.textContent = message;\n    notificationDiv.className = \"notification \".concat(type);\n    notificationDiv.style.display = \"block\";\n    setTimeout(function() {\n        notificationDiv.style.display = \"none\";\n    }, 5000);\n};\nvar clearNotification = function() {\n    notificationDiv.textContent = \"\";\n    notificationDiv.style.display = \"none\";\n};\nvar attachEditableEvent = function(cell) {\n    cell.addEventListener(\"dblclick\", function() {\n        createEditableCell(cell);\n    });\n};\nform.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    var isValid = true;\n    var formData = new FormData(form);\n    var employeeName = formData.get(\"name\");\n    var position = formData.get(\"position\");\n    var age = +formData.get(\"age\");\n    var office = formData.get(\"office\");\n    var salary = formData.get(\"salary\");\n    var lettersOnlyRegex = /^[A-Za-z\\s'`]+$/;\n    if (!employeeName || employeeName.trim().length === 0) {\n        displayNotification(\"Name cannot be empty or only spaces\", \"error\");\n        isValid = false;\n    } else if (!lettersOnlyRegex.test(employeeName)) {\n        displayNotification(\"Name must contain only letters\", \"error\");\n        isValid = false;\n    } else if (employeeName.length < 4) {\n        displayNotification(\"Name must be at least 4 characters long\", \"error\");\n        isValid = false;\n    }\n    if (!isValid) return;\n    if (!position || position.trim().length === 0) {\n        displayNotification(\"Position cannot be empty or only spaces\", \"error\");\n        isValid = false;\n    } else if (!lettersOnlyRegex.test(position)) {\n        displayNotification(\"Position must contain only letters\", \"error\");\n        isValid = false;\n    } else if (position.length < 4) {\n        displayNotification(\"Position must be at least 4 characters long\", \"error\");\n        isValid = false;\n    }\n    if (!isValid) return;\n    if (age < 18 || age > 90) {\n        displayNotification(\"Age must be between 18 and 90\", \"error\");\n        isValid = false;\n    }\n    if (!office) {\n        displayNotification(\"Office must be selected\", \"error\");\n        isValid = false;\n    }\n    if (!isValid) return;\n    if (!salary || isNaN(salary) || salary <= 0) {\n        displayNotification(\"Salary must be a positive number\", \"error\");\n        isValid = false;\n    }\n    if (!isValid) return;\n    removeActiveClass();\n    clearNotification();\n    var newRow = document.createElement(\"tr\");\n    [\n        \"name\",\n        \"position\",\n        \"office\",\n        \"age\",\n        \"salary\"\n    ].forEach(function(field) {\n        var cell = document.createElement(\"td\");\n        var value = formData.get(field);\n        if (field === \"salary\") value = \"$\".concat(parseFloat(value).toLocaleString(\"en-US\"));\n        cell.textContent = value;\n        cell.setAttribute(\"data-qa\", field);\n        attachEditableEvent(cell);\n        newRow.appendChild(cell);\n    });\n    table.querySelector(\"tbody\").appendChild(newRow);\n    if (currentIndex !== -1) sortTable(currentIndex, sortDirection);\n    form.reset();\n    displayNotification(\"Employee added successfully!\", \"success\");\n});\n\n//# sourceMappingURL=index.68489222.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nconst headers = table.querySelectorAll('th');\n\nlet sortDirection = 1;\nlet currentIndex = -1;\nlet activeInputCell = null;\n\nconst removeActiveClass = () => {\n  table.querySelectorAll('tr').forEach((row) => row.classList.remove('active'));\n};\n\nconst removeActiveInput = () => {\n  if (activeInputCell) {\n    const input = activeInputCell.querySelector('input');\n    const originalText = input.getAttribute('data-original-value');\n\n    activeInputCell.textContent = input.value || originalText;\n    activeInputCell = null;\n  }\n};\n\nheaders.forEach((header, index) => {\n  header.addEventListener('click', () => {\n    if (currentIndex === index) {\n      sortDirection *= -1;\n    } else {\n      sortDirection = 1;\n      currentIndex = index;\n    }\n\n    removeActiveClass();\n    sortTable(index, sortDirection);\n  });\n});\n\ntable.querySelector('tbody').addEventListener('click', (e) => {\n  if (e.target.tagName === 'TD') {\n    removeActiveClass();\n    e.target.parentElement.classList.add('active');\n  }\n});\n\nconst validateInput = (field, value) => {\n  const lettersOnlyRegex = /^[A-Za-z\\s'`]+$/;\n\n  if (!value || value.trim().length === 0) {\n    return false;\n  }\n\n  if (field === 'name' && (!lettersOnlyRegex.test(value) || value.length < 4)) {\n    return false;\n  }\n\n  if (field === 'position' && !lettersOnlyRegex.test(value)) {\n    return false;\n  }\n\n  if (field === 'age') {\n    const age = +value;\n\n    if (age < 18 || age > 90) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst createEditableCell = (cell) => {\n  const originalContent = cell.textContent.trim();\n  const field = cell.getAttribute('data-qa');\n\n  removeActiveInput();\n\n  cell.textContent = '';\n\n  const input = document.createElement('input');\n\n  input.type = 'text';\n  input.value = originalContent;\n  input.className = 'cell-input';\n  input.setAttribute('data-original-value', originalContent);\n\n  cell.appendChild(input);\n  input.focus();\n\n  const saveOrCancelInput = () => {\n    const newValue = input.value.trim();\n\n    if (!validateInput(field, newValue)) {\n      cell.textContent = originalContent;\n      displayNotification(`Invalid value for ${field}`, 'error');\n    } else {\n      cell.textContent = newValue || originalContent;\n\n      displayNotification(`Value for ${field} successfully updated`, 'success');\n    }\n  };\n\n  input.addEventListener('blur', saveOrCancelInput);\n\n  input.addEventListener('keypress', (e) => {\n    if (e.key === 'Enter') {\n      saveOrCancelInput();\n    }\n  });\n};\n\ntable.querySelectorAll('tbody td').forEach((cell) => {\n  cell.addEventListener('dblclick', () => {\n    createEditableCell(cell);\n  });\n});\n\nconst sortTable = (columnIndex, direction) => {\n  const tableBody = table.querySelector('tbody');\n  const rows = [...tableBody.querySelectorAll('tr')];\n\n  const sortedRows = rows.sort((a, b) => {\n    const aText = a.cells[columnIndex].textContent.trim();\n    const bText = b.cells[columnIndex].textContent.trim();\n\n    if (columnIndex === 4) {\n      const aSalary = parseFloat(aText.replace(/[$,]/g, ''));\n      const bSalary = parseFloat(bText.replace(/[$,]/g, ''));\n\n      return (aSalary - bSalary) * direction;\n    }\n\n    if (+aText && +bText) {\n      return (+aText - +bText) * direction;\n    }\n\n    return aText.localeCompare(bText) * direction;\n  });\n\n  tableBody.innerHTML = '';\n  tableBody.append(...sortedRows);\n};\n\nconst form = document.createElement('form');\n\nform.setAttribute('novalidate', true);\n\nform.classList.add('new-employee-form');\n\nconst createInput = (labelText, inputName, qaValue, type = 'text') => {\n  const label = document.createElement('label');\n\n  label.textContent = labelText;\n\n  const input = document.createElement('input');\n\n  input.name = inputName;\n  input.type = type;\n  input.setAttribute('data-qa', qaValue);\n  input.required = true;\n\n  label.appendChild(input);\n\n  return label;\n};\n\nconst createSelect = (labelText, selectName, options, qaValue) => {\n  const label = document.createElement('label');\n\n  label.textContent = labelText;\n\n  const select = document.createElement('select');\n\n  select.name = selectName;\n  select.setAttribute('data-qa', qaValue);\n  select.required = true;\n\n  options.forEach((optionText) => {\n    const option = document.createElement('option');\n\n    option.value = optionText;\n    option.textContent = optionText;\n    select.appendChild(option);\n  });\n\n  label.appendChild(select);\n\n  return label;\n};\n\nconst notificationDiv = document.createElement('div');\n\nnotificationDiv.setAttribute('data-qa', 'notification');\n\ndocument.body.appendChild(notificationDiv);\n\nform.appendChild(createInput('Name:', 'name', 'name'));\nform.appendChild(createInput('Position:', 'position', 'position'));\n\nform.appendChild(\n  createSelect(\n    'Office:',\n    'office',\n    ['Tokyo', 'Singapore', 'London', 'New York', 'Edinburgh', 'San Francisco'],\n    'office',\n  ),\n);\n\nform.appendChild(createInput('Age:', 'age', 'age', 'number'));\nform.appendChild(createInput('Salary:', 'salary', 'salary', 'number'));\n\nconst submitButton = document.createElement('button');\n\nsubmitButton.type = 'submit';\nsubmitButton.textContent = 'Save to table';\nform.appendChild(submitButton);\n\ndocument.body.appendChild(form);\n\nconst displayNotification = (message, type) => {\n  notificationDiv.textContent = message;\n  notificationDiv.className = `notification ${type}`;\n\n  notificationDiv.style.display = 'block';\n\n  setTimeout(() => {\n    notificationDiv.style.display = 'none';\n  }, 5000);\n};\n\nconst clearNotification = () => {\n  notificationDiv.textContent = '';\n  notificationDiv.style.display = 'none';\n};\n\nconst attachEditableEvent = (cell) => {\n  cell.addEventListener('dblclick', () => {\n    createEditableCell(cell);\n  });\n};\n\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  let isValid = true;\n  const formData = new FormData(form);\n  const employeeName = formData.get('name');\n  const position = formData.get('position');\n  const age = +formData.get('age');\n  const office = formData.get('office');\n  const salary = formData.get('salary');\n\n  const lettersOnlyRegex = /^[A-Za-z\\s'`]+$/;\n\n  if (!employeeName || employeeName.trim().length === 0) {\n    displayNotification('Name cannot be empty or only spaces', 'error');\n    isValid = false;\n  } else if (!lettersOnlyRegex.test(employeeName)) {\n    displayNotification('Name must contain only letters', 'error');\n    isValid = false;\n  } else if (employeeName.length < 4) {\n    displayNotification('Name must be at least 4 characters long', 'error');\n    isValid = false;\n  }\n\n  if (!isValid) {\n    return;\n  }\n\n  if (!position || position.trim().length === 0) {\n    displayNotification('Position cannot be empty or only spaces', 'error');\n    isValid = false;\n  } else if (!lettersOnlyRegex.test(position)) {\n    displayNotification('Position must contain only letters', 'error');\n    isValid = false;\n  } else if (position.length < 4) {\n    displayNotification('Position must be at least 4 characters long', 'error');\n    isValid = false;\n  }\n\n  if (!isValid) {\n    return;\n  }\n\n  if (age < 18 || age > 90) {\n    displayNotification('Age must be between 18 and 90', 'error');\n    isValid = false;\n  }\n\n  if (!office) {\n    displayNotification('Office must be selected', 'error');\n    isValid = false;\n  }\n\n  if (!isValid) {\n    return;\n  }\n\n  if (!salary || isNaN(salary) || salary <= 0) {\n    displayNotification('Salary must be a positive number', 'error');\n    isValid = false;\n  }\n\n  if (!isValid) {\n    return;\n  }\n\n  removeActiveClass();\n  clearNotification();\n\n  const newRow = document.createElement('tr');\n\n  ['name', 'position', 'office', 'age', 'salary'].forEach((field) => {\n    const cell = document.createElement('td');\n\n    let value = formData.get(field);\n\n    if (field === 'salary') {\n      value = `$${parseFloat(value).toLocaleString('en-US')}`;\n    }\n\n    cell.textContent = value;\n    cell.setAttribute('data-qa', field);\n\n    attachEditableEvent(cell);\n\n    newRow.appendChild(cell);\n  });\n\n  table.querySelector('tbody').appendChild(newRow);\n\n  if (currentIndex !== -1) {\n    sortTable(currentIndex, sortDirection);\n  }\n\n  form.reset();\n\n  displayNotification('Employee added successfully!', 'success');\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","selectName","options","qaValue","label","select","table","document","querySelector","headers","querySelectorAll","sortDirection","currentIndex","activeInputCell","removeActiveClass","forEach","row","classList","remove","removeActiveInput","input","originalText","getAttribute","textContent","value","header","index","addEventListener","sortTable","e","target","tagName","parentElement","add","validateInput","field","lettersOnlyRegex","trim","age","createEditableCell","cell","originalContent","createElement","type","className","setAttribute","appendChild","focus","saveOrCancelInput","newValue","displayNotification","concat","key","columnIndex","direction","tableBody","sortedRows","rows","sort","a","b","aText","cells","bText","aSalary","parseFloat","replace","localeCompare","innerHTML","append","apply","form","createInput","labelText","inputName","arguments","required","notificationDiv","body","optionText","option","submitButton","message","style","display","setTimeout","clearNotification","attachEditableEvent","preventDefault","isValid","formData","FormData","employeeName","get","position","office","salary","isNaN","newRow","toLocaleString","reset"],"version":3,"file":"index.68489222.js.map"}